#include <stdio.h>
#include <stdlib.h>
#include <poll.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/shm.h>
#include <sys/ipc.h>
#include <string.h>
#include <fcntl.h>

void error(char* msg)
{
	perror(msg);
	exit(1);
}

int shmid;
struct client_info
{
	int num_clients;
	int avail_id[10];
};

struct client_info *clients;
void init(int fd[],struct pollfd fds[],int n)
{
	int i;
	char rstr[20],wstr[20],buf[20];
	strcpy(rstr,"c_to_s_fifo");
	strcpy(wstr,"s_to_c_fifo");
	printf("%d\n",n);
	for(i=0;i<n;i++)
	{
		sprintf(buf,"%s%d",rstr,i);
		if(mkfifo(buf,0666) < 0)
		error("mkfifo()");
		printf("1 %s\n",buf);
		fds[i].fd = open(buf,O_RDONLY|O_NONBLOCK);printf("done");
		if(fds[i].fd < 0)
		error("open()");
		sprintf(buf,"%s%d",wstr,i);
		printf("2 %s\n",buf);
		if(mkfifo(buf,0666) < 0)
		error("mkfifo()");
		fd[i] = -1;
//		fd[i] = open(buf,O_WRONLY);
//		if(fd[i] < 0)
//		error("open()");
		fds[i].events = POLLIN;//listen for input
	}
	key_t key = ftok(".",1234);
//	num_clients = (struct client_info*)malloc(
	if((shmid = shmget(key,sizeof(struct client_info),IPC_CREAT|0666)) < 0)
	error("shmget()");
	clients = (struct client_info*) shmat(shmid,NULL,0);
	clients[0].num_clients = 0;
	for(i=0;i<n;i++)
	{
		clients[0].avail_id[i] = 1;//available
	}
}

void check_fd(int fd[],int n)
{
	int i;
	char buf[20];
	for(i=0;i<n;i++)
	{
		if(clients[0].avail_id[i] == 0 && fd[i] == -1)
		{	sprintf(buf,"%s%d","s_to_c_fifo",i);
			fd[i] = open(buf,O_WRONLY);
			if(fd[i] < 0)
			error("open()");
		}
	}
}

int main(int argc,char* argv[])
{
	if(argc != 2)
	{
		printf("Usage : %s number of clients",argv[0]);
		exit(1);
	}
	int n = atoi(argv[1]);
	int fd[n];
	struct pollfd fds[n];
	int i,res,j,nbytes;
	char buf[256],msgbuf[256];
	init(fd,fds,n);
	while(1)
	{
		check_fd(fd,n);
	  	if(clients[0].num_clients > 0)
		{
			res = poll(fds,clients[0].num_clients,0);
			if(res == -1)
			error("poll()");
			else if(res > 0)
			{
				for(i=0;i<clients[0].num_clients;i++)
				{
					if(fds[i].revents & POLLIN)
					{
						nbytes = read(fds[i].fd,buf,256);
						sprintf(msgbuf,"%s %d : %s","Client",i,buf);
						for(j=0;j<clients[0].num_clients;j++)
						{
							if(i != j)
							{
								write(fd[j],msgbuf,strlen(msgbuf));
							}
						}
					}
				}
			}
		}
		else
		sleep(1);	
	}
	//how to remove	
	return 0;
}
